# activities/probability/binomial_normal_approx.py
import streamlit as st
import numpy as np
import plotly.graph_objects as go
from scipy.stats import binom, norm

try:
    from utils import page_header, anchor, scroll_to
except Exception:
    def page_header(title, subtitle="", icon="", top_rule=True):
        if top_rule: st.markdown("---")
        st.markdown(f"### {icon+' ' if icon else ''}{title}")
        if subtitle: st.caption(subtitle)
    def anchor(name="content"): st.markdown(f"<a id='{name}'></a>", unsafe_allow_html=True)
    def scroll_to(name="content"):
        import streamlit.components.v1 as components
        components.html(f"<script>window.location.hash='{name}'</script>", height=0)

META = {
    "title": "Ïù¥Ìï≠‚ÜíÏ†ïÍ∑ú Í∑ºÏÇ¨",
    "description": "Ïù¥Ìï≠Î∂ÑÌè¨ pmfÏôÄ Ï†ïÍ∑ú Í∑ºÏÇ¨(Ïó∞ÏÜçÏÑ± Î≥¥Ï†ï Ìè¨Ìï®/Ï†úÏô∏)Î•º ÎπÑÍµêÌïòÍ≥†, Íµ¨Í∞ÑÌôïÎ•†ÏùÑ Í≥ÑÏÇ∞Ìï©ÎãàÎã§.",
}

# --- ÏÑ∏ÏÖò ÌÇ§ & Í∏∞Î≥∏Í∞í ---
K_N       = "bna_n"
K_P       = "bna_p"
K_BINS    = "bna_bins"
K_CC      = "bna_cc"      # continuity correction ÏÇ¨Ïö© Ïó¨Î∂Ä
K_SHOWPMF = "bna_showpmf" # Í∑ºÏÇ¨ pmfÎèÑÏÑ† Î≥¥ÏùºÏßÄ
K_A       = "bna_a"
K_B       = "bna_b"
JUMP      = "bna_jump"

DEFAULTS = {
    K_N:  50,
    K_P:  0.3,
    K_BINS: 0,   # ÏÇ¨Ïö© ÏïàÌï®(Ìò∏ÌôòÏö©)
    K_CC: True,
    K_SHOWPMF: True,
    K_A: 15,
    K_B: 25,
}

def _ensure_defaults():
    for k, v in DEFAULTS.items():
        if k not in st.session_state:
            st.session_state[k] = v

def _mark_changed():
    st.session_state[JUMP] = "graph"

def _normal_pmf_approx(k_vals, mu, sd, cc=True):
    # Í∞Å Ï†ïÏàò kÏóê ÎåÄÌï¥ Í∑ºÏÇ¨ ÌôïÎ•†: Œ¶((k+0.5-Œº)/œÉ) - Œ¶((k-0.5-Œº)/œÉ)
    if cc:
        lo = (k_vals - 0.5 - mu) / sd
        hi = (k_vals + 0.5 - mu) / sd
        return norm.cdf(hi) - norm.cdf(lo)
    # Ïó∞ÏÜçÏÑ± Î≥¥Ï†ï X: Î∞ÄÎèÑ*Ìè≠(‚âà1)ÏúºÎ°ú Í∑ºÏÇ¨
    return norm.pdf((k_vals - mu) / sd) * 1.0

def render():
    _ensure_defaults()
    page_header("Ïù¥Ìï≠Î∂ÑÌè¨Ïùò Ï†ïÍ∑ú Í∑ºÏÇ¨", "Ïó∞ÏÜçÏÑ± Î≥¥Ï†ï Ïú†Î¨¥Ïóê Îî∞Î•∏ ÎπÑÍµê Î∞è Íµ¨Í∞ÑÌôïÎ•† Í≥ÑÏÇ∞", icon="üßÆ", top_rule=True)

    # ---- ÏÇ¨Ïù¥ÎìúÎ∞î ----
    with st.sidebar:
        st.subheader("‚öôÔ∏è ÏÑ§Ï†ï")
        st.slider("ÏãúÌñâ Ïàò n", 1, 500, value=int(st.session_state[K_N]), key=K_N, on_change=_mark_changed)
        st.slider("ÏÑ±Í≥µÌôïÎ•† p", 0.0, 1.0, value=float(st.session_state[K_P]), step=0.01, key=K_P, on_change=_mark_changed)
        st.checkbox("Ïó∞ÏÜçÏÑ± Î≥¥Ï†ï ÏÇ¨Ïö©", value=bool(st.session_state[K_CC]), key=K_CC, on_change=_mark_changed)
        st.checkbox("Í∑ºÏÇ¨ pmf Í≥°ÏÑ†ÎèÑ ÌëúÏãú", value=bool(st.session_state[K_SHOWPMF]), key=K_SHOWPMF, on_change=_mark_changed)

        # Íµ¨Í∞Ñ ÌôïÎ•† ÏûÖÎ†•
        st.markdown("**üéØ Íµ¨Í∞ÑÌôïÎ•† P(a ‚â§ X ‚â§ b)**")
        st.number_input("a (Ï†ïÏàò)", value=int(st.session_state[K_A]), step=1, key=K_A, on_change=_mark_changed)
        st.number_input("b (Ï†ïÏàò, a‚â§b)", value=int(st.session_state[K_B]), step=1, key=K_B, on_change=_mark_changed)

    # ---- ÌòÑÏû¨ ÏÑ§Ï†ï ----
    n = int(st.session_state[K_N])
    p = float(st.session_state[K_P])
    cc = bool(st.session_state[K_CC])
    show_curve = bool(st.session_state[K_SHOWPMF])
    a = int(st.session_state[K_A])
    b = int(st.session_state[K_B])

    mu = n * p
    sd = np.sqrt(n * p * (1 - p))

    # Ìï©Î¶¨Ï†Å ÌëúÏãú Íµ¨Í∞Ñ
    k_min = max(0, int(np.floor(mu - 4 * sd)))
    k_max = min(n, int(np.ceil(mu + 4 * sd)))
    k = np.arange(k_min, k_max + 1)

    # ---- ÏïµÏª§ ----
    anchor("graph")

    # pmf (Ï†ïÌôï)
    pmf = binom.pmf(k, n, p)

    # Ï†ïÍ∑ú Í∑ºÏÇ¨ pmf (cc Ïó¨Î∂Ä)
    approx_pmf = _normal_pmf_approx(k, mu, sd, cc=cc)

    # ÏãúÍ∞ÅÌôî
    fig = go.Figure()
    fig.add_bar(x=k, y=pmf, name="Ïù¥Ìï≠ pmf(Ï†ïÌôï)", opacity=0.65)

    if show_curve:
        fig.add_scatter(
            x=k, y=approx_pmf, mode="lines+markers",
            name=f"Ï†ïÍ∑ú Í∑ºÏÇ¨ pmf ({'CC' if cc else 'no CC'})",
            line=dict(width=2)
        )

    fig.update_layout(
        title=f"Bin(n={n}, p={p:.3f}) vs Normal(Œº={mu:.2f}, œÉ={sd:.2f})",
        xaxis_title="k (ÏÑ±Í≥µ ÌöüÏàò)",
        yaxis_title="ÌôïÎ•†",
        legend_title="Î≤îÎ°Ä",
        bargap=0.05,
    )
    st.plotly_chart(fig, use_container_width=True)

    # ---- Íµ¨Í∞ÑÌôïÎ•† Í≥ÑÏÇ∞: Ï†ïÌôïÍ∞í vs Ï†ïÍ∑úÍ∑ºÏÇ¨ ----
    if a > b: a, b = b, a
    a_clip = max(0, min(n, a))
    b_clip = max(0, min(n, b))

    exact = float(binom.cdf(b_clip, n, p) - (binom.cdf(a_clip - 1, n, p) if a_clip > 0 else 0.0))

    # Í∑ºÏÇ¨ (Ïó∞ÏÜçÏÑ± Î≥¥Ï†ï Ï†ÅÏö©/ÎØ∏Ï†ÅÏö©)
    if cc:
        z_hi = (b_clip + 0.5 - mu) / sd
        z_lo = (a_clip - 0.5 - mu) / sd
        approx = float(norm.cdf(z_hi) - norm.cdf(z_lo))
    else:
        z_hi = (b_clip - mu) / sd
        z_lo = (a_clip - mu) / sd
        approx = float(norm.cdf(z_hi) - norm.cdf(z_lo))

    st.markdown(
        f"**Íµ¨Í∞ÑÌôïÎ•†** P({a_clip} ‚â§ X ‚â§ {b_clip})  ‚Üí  "
        f"Ï†ïÌôï: **{exact:.6f}**,  Ï†ïÍ∑úÍ∑ºÏÇ¨({ 'CC' if cc else 'no CC' }): **{approx:.6f}**,  "
        f"Ïò§Ï∞®: **{(approx - exact):+.6f}**"
    )

    # Ï†êÌîÑ
    if st.session_state.get(JUMP) == "graph":
        scroll_to("graph")
        st.session_state[JUMP] = None
